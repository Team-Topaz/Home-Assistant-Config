input_number:
  garden_irrigation_target:
    name: Garden Irrigation Inches
    icon: mdi:water
    min: 0
    max: 4
    step: .25

input_boolean:
  garden_irrigated:
    name: 'Garden Watered'
    icon: mdi:water-pump

binary_sensor:
  - platform: template
    sensors:
      garden_is_growing_season:
        friendly_name: 'Garden: Is Growing Season'
        device_class: cold
        value_template: >
          {% if ((states('sensor.day_of_year') | int) >= 90) and ((states('sensor.day_of_year') | int) <= 305) %}
           True
          {% else %}
           False
          {% endif %}
      garden_sun_is_visible:
        friendly_name: 'Garden: Sun is Visible'
        device_class: light
        value_template: >
          {% if ( states('sensor.solar_elevation') | float ) > 31 %}
           True
          {% else %}
           False
          {% endif %}

sensor:
  - platform: mqtt
    state_topic: "rainmeter/weekly"
    name: "Garden Rainmeter Weekly"
    unit_of_measurement: "in"
    value_template: '{{ value | float | round(1) }}'

  - platform: mqtt
    state_topic: "rainmeter/heatcompensation"
    name: "Garden Rainmeter Heat Compensation"
    unit_of_measurement: "in"
    value_template: '{{ value | float | round(1) }}'

  - platform: template
    sensors:
      garden_rainmeter_water_needs:
        friendly_name: 'Garden Rainmeter Water Needs'
        value_template: "{{ ((states('input_number.garden_irrigation_target') | float) - (states('sensor.garden_rainmeter_weekly') | float) + (states('sensor.garden_rainmeter_heat_compensation') | float)) | round(1) }}"
        unit_of_measurement: 'in'
      garden_rainmeter_water_needs_gal:
        friendly_name: 'Garden Rainmeter Irrigation Volume'
        value_template: "{{ ((states('sensor.garden_rainmeter_water_needs') | float) * 34.28) | round(0) }}"
        unit_of_measurement: 'gal'
        #The conversion from inches to gallons is: 1" * 55 sq ft = 4.58 cubic feet * 7.48052 cu ft/gallon = 34.28 gallons per inch of water needed.

  #Calculate the sun exposure of the garden. My formula for this is pretty bad.
  #We assume that we have 0 sun exposure unless the sun is above 32 degrees.
  #At 32 degrees, sun exposure is considered to be 100%
  #The sun exposure is then just the cloud cover coefficient.
  - platform: template
    sensors:
      garden_sun_level:
        friendly_name: 'Garden Sun Exposure'
        value_template: >
          {% if is_state('binary_sensor.garden_sun_is_visible', 'On') %}
            {{ (states('sensor.cloud_cover_coefficient') | float) * 100 }}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: '%'

automation:
  #TBH I'm not sure if ANY of these work.
  - id: garden_frost_alert
    alias: 'Garden: Frost Alert'
    trigger:
    - platform: time
      at: '00:08:00'
    condition:
      condition: and
      conditions:
        - condition: numeric_state
          entity_id: sensor.temperature_low
          below: 34
        - condition: state
          entity_id: binary_sensor.garden_is_growing_season
          state: 'on'
    action:
    - service: notify.preferred_notification
      data_template:
        title: 'Unexpected Frost!'
        message: "Today's temperature is expected to dip to {{ states('sensor.temperature_low') | float | round(0) | int }}Â°F. Protect frost-sensitive plants."
        data:
          tag: 'garden_frost'

  - id: garden_frost_alert_enabled
    alias: 'Garden: Frost Alert Enabled'
    trigger:
    - platform: state
      entity_id: binary_sensor.garden_is_growing_season
      to: 'on'
    action:
    - wait_template: "{{ (as_timestamp(now()) | timestamp_custom('%j', true) | int) == 8 }}"
    - service: notify.preferred_notification
      data:
        title: 'Garden Frost Alerts Started'
        message: "Gardening season has begun! You'll recieve alerts if frost is forecasted."
        data:
          tag: 'garden_frost_alerts_enabled'

  - id: garden_frost_alert_disabled
    alias: 'Garden: Frost Alert Disabled'
    trigger:
    - platform: state
      entity_id: binary_sensor.garden_is_growing_season
      to: 'off'
    action:
    - wait_template: "{{ (as_timestamp(now()) | timestamp_custom('%j', true) | int) == 8 }}"
    - service: notify.preferred_notification
      data:
        title: 'Garden Frost Alerts Ended'
        message: "Gardening season is wrapping up! Alerts for frost have stopped."
        data:
          tag: 'garden_frost_alerts_enabled'

  - id: garden_irrigation_reset_status
    alias: 'Garden: Reset Irrigation status'
    trigger:
    - platform: time
      at: '00:00:00'
    action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.garden_irrigated

  - id: garden_irrigation_check
    alias: 'Garden: Check irrigation status'
    trigger:
    - platform: time
      at: '08:00:00'
    condition:
      condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.garden_is_growing_season
        state: 'on'
      - condition: template
        value_template: "{{ as_timestamp(now()) | timestamp_custom('%w') == 6 }}" #On Saturday
    action:
    - service: notify.preferred_notification
      data_template:
        title: Water the Garden
        message: "It's watering day! It needs about {{ states(sensor.garden_rainmeter_water_needs) }} inches!"
        data:
          tag: garden_irrigation
          actions:
          - action: garden_irrigated
            title: "Irrigated"

  - id: garden_irrigation_complete
    alias: 'Garden: Irrigation Complete'
    trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: garden_irrigated
    action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.garden_irrigated
