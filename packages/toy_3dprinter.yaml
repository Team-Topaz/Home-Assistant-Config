input_boolean:
  3d_printer_allow_stop:
    name: 'Enable Dangerous Actions'
    icon: mdi:alert

switch:
  - platform: tplink
    host: 192.168.1.52
    name: '3D Printer Power'

  - platform: template
    switches:
      3d_printer_bed_preheat:
        friendly_name: 'Bed Preheat'
        value_template: '{{ states("binary_sensor.3d_printer_bed_preheating") }}'
        turn_on:
          service: script.turn_on
          entity_id: script.3d_printer_preheat_bed_on
        turn_off:
          service: script.turn_on
          entity_id: script.3d_printer_preheat_bed_off
      3d_printer_nozzle_preheat:
        friendly_name: 'Nozzle Preheat'
        value_template: '{{ states("binary_sensor.3d_printer_nozzle_preheating") }}'
        turn_on:
          service: script.turn_on
          entity_id: script.3d_printer_preheat_nozzle_on
        turn_off:
          service: script.turn_on
          entity_id: script.3d_printer_preheat_nozzle_off

camera:
  - platform: mjpeg
    mjpeg_url: http://192.168.1.85:10123/?action=stream
    still_image_url: http://192.168.1.85:10123/?action=snapshot
    name: Dremel 3D45

rest_command:
  3d_printer_pause:
    url: http://192.168.1.85/command
    method: POST
    payload: 'PAUSE={{states("sensor.3d_printer_job_name")}}'
  3d_printer_resume:
    url: http://192.168.1.85/command
    method: POST
    payload: 'RESUME={{states("sensor.3d_printer_job_name")}}'
  3d_printer_stop:
    url: http://192.168.1.85/command
    method: POST
    payload: 'CANCEL={{states("sensor.3d_printer_job_name")}}'
  3d_printer_bed_preheat:
    url: http://192.168.1.85/command
    method: POST
    payload: 'PLATEHEAT'
  3d_printer_bed_preheat_off:
    url: http://192.168.1.85/command
    method: POST
    payload: 'STOPPLATEHEAT'
  3d_printer_nozzle_preheat:
    url: http://192.168.1.85/command
    method: POST
    payload: 'NOZZLEHEAT'
  3d_printer_nozzle_preheat_off:
    url: http://192.168.1.85/command
    method: POST
    payload: 'STOPNOZZLEHEAT'

script:
  #These scripts are used to support the preheat buttons.
  #Because the sensors only update periodically, the scripts
  #force an update immediately after they are run.
  #this minimizes the wait on the UI so it's invisible to user.
  3d_printer_preheat_bed_on:
    alias: '3D Printer: Preheat Bed On'
    sequence:
      - service: rest_command.3d_printer_bed_preheat
      - delay:
          milliseconds: 500
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  3d_printer_preheat_bed_off:
    alias: '3D Printer: Preheat Bed Off'
    sequence:
      - service: rest_command.3d_printer_bed_preheat_off
      - delay:
          milliseconds: 500
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  3d_printer_preheat_nozzle_on:
    alias: '3D Printer: Preheat Nozzle On'
    sequence:
      - service: rest_command.3d_printer_nozzle_preheat
      - delay:
          milliseconds: 500
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  3d_printer_preheat_nozzle_off:
    alias: '3D Printer: Preheat Nozzle Off'
    sequence:
      - service: rest_command.3d_printer_nozzle_preheat_off
      - delay:
          milliseconds: 500
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  #These are just thin crappy wrappers for the REST commands.
  #They refresh the sensor that we use to get job info.
  3d_printer_pause_job:
    alias: 'Pause Job'
    sequence:
      - service: rest_command.3d_printer_pause
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  3d_printer_resume_job:
    alias: 'Resume Job'
    sequence:
      - service: rest_command.3d_printer_resume
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  3d_printer_stop_job:
    alias: 'Stop Job'
    sequence:
      - service: rest_command.3d_printer_stop
      - service: homeassistant.update_entity
        data:
          entity_id: sensor.3d_printer_p80
  3d_printer_stop_job_safe:
    alias: 'Stop Job (enable with slider)'
    sequence:
      - condition: state
        entity_id: 'input_boolean.3d_printer_allow_stop'
        state: 'on'
      - service: script.turn_on
        entity_id: script.3d_printer_stop_job
  3d_printer_turn_off_printer_safe:
    alias: 'Power Off (enable with slider)'
    sequence:
      - condition: state
        entity_id: 'input_boolean.3d_printer_allow_stop'
        state: 'on'
      - service: switch.turn_off
        entity_id: switch.3d_printer_power
  3d_printer_main_power_on:
    alias: 'Power On'
    sequence:
      - service: switch.turn_on
        entity_id: switch.3d_printer_power


automation:
  - id: 3d_printer_confirmation_slider_revert
    alias: "3D Printer: Revert input to safe position"
    trigger:
      - platform: state
        entity_id: input_boolean.3d_printer_allow_stop
        to: 'on'
        for:
          seconds: 10
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.3d_printer_allow_stop
