sensor:
  - platform: systemmonitor
    scan_interval: 240
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: load_5m

  - platform: uptime

  - platform: rpi_power

  - platform: command_line
    name: CPU Temperature
    command: "cat /sys/class/thermal/thermal_zone0/temp"
    unit_of_measurement: "Â°C"
    value_template: '{{ value | multiply(0.001) }}'

  - platform: command_line
    name: CPU Frequency
    command: "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq"
    unit_of_measurement: "MHz"
    value_template: '{{ value | multiply(0.001) }}'

  - platform: mqtt
    state_topic: "$SYS/broker/uptime"
    name: "MQTT Broker Uptime"

  - platform: dnsip
    ipv6: false
    scan_interval: 1200
  - platform: dnsip
    hostname: !secret hostname
    ipv6: false
    scan_interval: 1200

timer:
  #This timeout is used to determine how long before HASS detects a failure
  #with the MQTT broker. It has been left long on purpose, as restarting the
  #server would otherwise cause it to trigger.
  mqtt_timeout:
    duration: '00:20:00'

automation:
  - id: hass_update_sonoff_power_state
    alias: "HASS: Get Sonoff Power State"
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: mqtt.publish
        data:
          topic: "cmnd/sonoffs/state"
          payload: ""
  - id: hass_update_available
    alias: 'HASS: Update Available Notifications'
    trigger:
      platform: state
      entity_id: updater.updater
    action:
      service: notify.email_ryan
      data:
        title: 'HASS Update Available'
        message: 'Update for Home Assistant is available.'
  #Begin counting down MQTT timeout.
  - id: hass_mqtt_timeout_refresh
    alias: "HASS: Reset MQTT Timeout"
    trigger:
      - platform: state
        entity_id: sensor.mqtt_broker_uptime
    action:
      - service: timer.start
        entity_id: timer.mqtt_timeout
        #See "selfrepair" for what happens if this times out.
